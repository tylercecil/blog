var chomTree=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t){t.exports=JSON.parse('{"a":"2.1.1"}')},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2);Object.defineProperty(e,"parse",{enumerable:!0,get:function(){return r.parse}});var i=n(4);Object.defineProperty(e,"render",{enumerable:!0,get:function(){return i.render}});var o=n(5);Object.defineProperty(e,"select",{enumerable:!0,get:function(){return o.select}}),Object.defineProperty(e,"selectAll",{enumerable:!0,get:function(){return o.selectAll}})},function(t,e,n){"use strict";var r=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.parse=e.tokenize=void 0;var i=n(3);function o(t){var e,n,i,o;return r(this,(function(r){switch(r.label){case 0:e=/\s/,n=/[.*/_^[\]]/,i=0,r.label=1;case 1:return i<t.length?n.test(t[i])?[4,{kind:t[i]}]:[3,3]:[3,8];case 2:return r.sent(),i++,[3,7];case 3:if(!e.test(t[i]))return[3,5];for(o={kind:"WHITESPACE",value:""};e.test(t[i]);)o.value=o.value.concat(t[i]),i++;return[4,o];case 4:return r.sent(),[3,7];case 5:for(o={kind:"WORD",value:""};i<t.length&&!n.test(t[i])&&!e.test(t[i]);)o.value=o.value.concat(t[i]),i++;return[4,o];case 6:r.sent(),r.label=7;case 7:return[3,1];case 8:return[2,{kind:"EOF"}]}}))}e.parse=function(t){var e=o(t),n=e.next().value,r=s();return a(),c("EOF"),r;function u(t){return a(),a(t)}function a(t){void 0===t&&(t="WHITESPACE");var r=null;return n.kind===t&&(r=n,n=e.next().value),r}function c(t){var e=u(t);if(!e)throw"Unexpected token!: "+n.kind;return e}function s(){var t=i.Tree(),e=t;if(c("["),a(),"WORD"==n.kind){for(t.nodeType=l();u(".");){var r=i.Tree();e.children.push(r),r.nodeType=l(),e=r}switch(n.kind){case"[":e.children=function(){var t=[];a();for(;"["===n.kind;)t.push(s()),a();return t}();break;case"*":r=i.Tree();e.children.push(r),r.leaf=h(),e=r;break;case".":case"/":case"_":case"^":case"WORD":e.leaf=h()}}return c("]"),t}function l(){var t={name:"",sub:"",sup:""};return t.name=c("WORD").value,u("_")?(t.sub=c("WORD").value,u("^")&&(t.sup=c("WORD").value)):u("^")&&(t.sup=c("WORD").value,u("_")&&(t.sub=c("WORD").value)),t}function h(){var t="",r=!1;if(u("/"))t="âˆ…";else for(u("*")&&(r=!0),t+=c("WORD").value;"["!=n.kind&&"]"!=n.kind&&"EOF"!=n.kind;)t+=n.value?n.value:n.kind,n=e.next().value;return{data:t,isCollapsed:r}}},e.tokenize=o},function(t,e,n){"use strict";function r(){return{children:[]}}Object.defineProperty(e,"__esModule",{value:!0}),e.TreeBuilder=e.Tree=void 0,e.Tree=r;var i=function(){function t(){this.tree={children:[]}}return t.prototype.name=function(t){return this.tree.nodeType||(this.tree.nodeType={name:"",sub:"",sup:""}),this.tree.nodeType.name=t,this},t.prototype.sub=function(t){return this.tree.nodeType||(this.tree.nodeType={name:"",sub:"",sup:""}),this.tree.nodeType.sub=t,this},t.prototype.sup=function(t){return this.tree.nodeType||(this.tree.nodeType={name:"",sub:"",sup:""}),this.tree.nodeType.sup=t,this},t.prototype.data=function(t){return this.tree.leaf||(this.tree.leaf={data:"",isCollapsed:!1}),this.tree.leaf.data=t,this},t.prototype.collapse=function(t){return void 0===t&&(t=!0),this.tree.leaf||(this.tree.leaf={data:"",isCollapsed:!1}),this.tree.leaf.isCollapsed=t,this},t.prototype.add=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return e.forEach((function(e){return t.tree.children.push(e.build())})),this},t.prototype.build=function(){return this.tree},t}();e.TreeBuilder=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.render=void 0;var r=n(6),i={padding:{x:0,y:.25},margin:{x:.75,y:1},lineSpacing:1.2},o={strokeWidth:.05};e.render=function(t,e){var n=i,u=o,a={mBox:{x1:function(t){return t.left},y1:function(t){return t.top},x2:function(t){return t.right},y2:function(t){return t.bottom},width:function(t){return a.mBox.x2(t)-a.mBox.x1(t)},height:function(t){return a.mBox.y2(t)-a.mBox.y1(t)}},pBox:{x1:function(t){return t.left+n.margin.x},y1:function(t){return t.top+n.margin.y},x2:function(t){return t.right-n.margin.x},y2:function(t){return t.bottom-n.margin.y},width:function(t){return a.pBox.x2(t)-a.pBox.x1(t)},height:function(t){return a.pBox.y2(t)-a.pBox.y1(t)}},cBox:{x1:function(t){return t.left+n.margin.x+n.padding.x},y1:function(t){return t.top+n.margin.y+n.padding.y},x2:function(t){return t.right-n.margin.x-n.padding.x},y2:function(t){return t.bottom-n.margin.y-n.padding.x},width:function(t){return a.cBox.x2(t)-a.cBox.x1(t)},height:function(t){return a.cBox.y2(t)-a.cBox.y1(t)}},centerX:function(t){return t.x},calcApplySpacing:function(t){return[t.data.size[0]+2*(n.padding.x+n.margin.x),t.data.size[1]+2*(n.padding.y+n.margin.y)]}};function c(t,e){t.select("g.nodes").selectAll("g.node").data(e.descendants()).join((function(t){var e=t.append("g").classed("node",!0);e.append("rect").classed("mBox",!0).attr("x",0).attr("y",0).attr("width",0).attr("height",0).style("stroke-width",u.strokeWidth),e.append("rect").classed("pBox",!0).attr("x",0).attr("y",0).attr("width",0).attr("height",0).style("stroke-width",u.strokeWidth),e.append("rect").classed("cBox",!0).attr("x",0).attr("y",0).attr("width",0).attr("height",0).style("stroke-width",u.strokeWidth);var r=e.filter((function(t){return null!=t.data.nodeType})).append("text").attr("x",0).attr("y",0).classed("nodeType",!0).text((function(t){var e,n;return null!==(n=null===(e=t.data.nodeType)||void 0===e?void 0:e.name)&&void 0!==n?n:""})).attr("font-size",1).attr("dominant-baseline","hanging").attr("text-anchor","middle");return r.filter((function(t){var e;return""!=(null===(e=t.data.nodeType)||void 0===e?void 0:e.sub)})).append("tspan").text((function(t){return t.data.nodeType.sub})).attr("font-size",.9).attr("baseline-shift","sub"),r.filter((function(t){var e;return""!=(null===(e=t.data.nodeType)||void 0===e?void 0:e.sup)})).append("tspan").text((function(t){return t.data.nodeType.sup})).attr("font-size",.9).attr("baseline-shift","super"),e.filter((function(t){var e;return null!=(null===(e=t.data.leaf)||void 0===e?void 0:e.data)})).append("text").attr("x",0).attr("y",0).classed("nodeData",!0).text((function(t){return t.data.leaf.data})).attr("dx",0).attr("dy",(function(t){return(null!=t.data.nodeType?n.lineSpacing:0)+"em"})).attr("font-size",.9).attr("dominant-baseline","hanging").attr("text-anchor","middle"),e.each((function(t,e,n){var r=n[e].getBBox();t.data.size=[r.width,r.height]})),e}),(function(t){return t.select("rect.mBox").attr("x",a.mBox.x1).attr("y",a.mBox.y1).attr("width",a.mBox.width).attr("height",a.mBox.height),t.select("rect.pBox").attr("x",a.pBox.x1).attr("y",a.pBox.y1).attr("width",a.pBox.width).attr("height",a.pBox.height),t.select("rect.cBox").attr("x",a.cBox.x1).attr("y",a.cBox.y1).attr("width",a.cBox.width).attr("height",a.cBox.height),t.select(".nodeType").attr("x",a.centerX).attr("y",a.cBox.y1),t.select(".nodeData").attr("x",a.centerX).attr("y",a.cBox.y1),t}))}var s=r.flextree().spacing(0).nodeSize(a.calcApplySpacing),l=s.hierarchy(t),h=function(t){var e=t.append("svg").style("display","block").style("margin","auto");return e.append("g").classed("links",!0),e.append("g").classed("nodes",!0),e}(e);return c(h,l),s(l),function(t,n){var r=function(t){var e={x:-1/0,y:-1/0},n={x:1/0,y:1/0};return t.each((function(t){e.x=Math.max(a.mBox.x2(t),e.x),e.y=Math.max(a.mBox.y2(t),e.y),n.x=Math.min(a.mBox.x1(t),n.x),n.y=Math.min(a.mBox.y1(t),n.y)})),[n.x,n.y,e.x-n.x,e.y-n.y]}(n);t.attr("viewBox",r.join(" "));var i=e.style("font-size").match(/([0-9]*)px/);i&&t.style("max-width",r[2]*parseInt(i[0]))}(h,l),c(h,l),function(t,e){var n=t.select("g.links").selectAll(".link").data(e.links()).enter();n.filter((function(t){var e,n;return!(null!==(n=null===(e=t.target.data.leaf)||void 0===e?void 0:e.isCollapsed)&&void 0!==n&&n)})).append("line").classed("link",!0).attr("x1",(function(t){return a.centerX(t.source)})).attr("y1",(function(t){return a.pBox.y2(t.source)})).attr("x2",(function(t){return a.centerX(t.target)})).attr("y2",(function(t){return a.pBox.y1(t.target)})),n.filter((function(t){var e,n;return null!==(n=null===(e=t.target.data.leaf)||void 0===e?void 0:e.isCollapsed)&&void 0!==n&&n})).append("polygon").classed("link",!0).attr("points",(function(t){var e=a.centerX(t.source),n=a.pBox.y2(t.source),r=a.pBox.y1(t.target);return e+","+n+" "+a.pBox.x1(t.target)+","+r+" "+a.pBox.x2(t.target)+","+r})),t.select("g.links").style("stroke-width",u.strokeWidth).style("fill-opacity",0)}(h,l),l}},function(t,e,n){"use strict";n.r(e),n.d(e,"create",(function(){return yt})),n.d(e,"creator",(function(){return c})),n.d(e,"local",(function(){return vt})),n.d(e,"matcher",(function(){return d})),n.d(e,"mouse",(function(){return wt})),n.d(e,"namespace",(function(){return o})),n.d(e,"namespaces",(function(){return i})),n.d(e,"clientPoint",(function(){return _t})),n.d(e,"select",(function(){return pt})),n.d(e,"selectAll",(function(){return bt})),n.d(e,"selection",(function(){return dt})),n.d(e,"selector",(function(){return l})),n.d(e,"selectorAll",(function(){return f})),n.d(e,"style",(function(){return O})),n.d(e,"touch",(function(){return Et})),n.d(e,"touches",(function(){return Bt})),n.d(e,"window",(function(){return S})),n.d(e,"event",(function(){return tt})),n.d(e,"customEvent",(function(){return ut}));var r="http://www.w3.org/1999/xhtml",i={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},o=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),i.hasOwnProperty(e)?{space:i[e],local:t}:t};function u(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===r&&e.documentElement.namespaceURI===r?e.createElement(t):e.createElementNS(n,t)}}function a(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var c=function(t){var e=o(t);return(e.local?a:u)(e)};function s(){}var l=function(t){return null==t?s:function(){return this.querySelector(t)}};function h(){return[]}var f=function(t){return null==t?h:function(){return this.querySelectorAll(t)}},d=function(t){return function(){return this.matches(t)}},p=function(t){return new Array(t.length)};function y(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}y.prototype={constructor:y,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function g(t,e,n,r,i,o){for(var u,a=0,c=e.length,s=o.length;a<s;++a)(u=e[a])?(u.__data__=o[a],r[a]=u):n[a]=new y(t,o[a]);for(;a<c;++a)(u=e[a])&&(i[a]=u)}function v(t,e,n,r,i,o,u){var a,c,s,l={},h=e.length,f=o.length,d=new Array(h);for(a=0;a<h;++a)(c=e[a])&&(d[a]=s="$"+u.call(c,c.__data__,a,e),s in l?i[a]=c:l[s]=c);for(a=0;a<f;++a)(c=l[s="$"+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],l[s]=null):n[a]=new y(t,o[a]);for(a=0;a<h;++a)(c=e[a])&&l[d[a]]===c&&(i[a]=c)}function x(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function m(t){return function(){this.removeAttribute(t)}}function _(t){return function(){this.removeAttributeNS(t.space,t.local)}}function w(t,e){return function(){this.setAttribute(t,e)}}function b(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function E(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function B(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var S=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function A(t){return function(){this.style.removeProperty(t)}}function T(t,e,n){return function(){this.style.setProperty(t,e,n)}}function k(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function O(t,e){return t.style.getPropertyValue(e)||S(t).getComputedStyle(t,null).getPropertyValue(e)}function X(t){return function(){delete this[t]}}function C(t,e){return function(){this[t]=e}}function z(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function j(t){return t.trim().split(/^|\s+/)}function P(t){return t.classList||new R(t)}function R(t){this._node=t,this._names=j(t.getAttribute("class")||"")}function M(t,e){for(var n=P(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function N(t,e){for(var n=P(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function D(t){return function(){M(this,t)}}function W(t){return function(){N(this,t)}}function $(t,e){return function(){(e.apply(this,arguments)?M:N)(this,t)}}R.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function L(){this.textContent=""}function q(t){return function(){this.textContent=t}}function I(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function V(){this.innerHTML=""}function H(t){return function(){this.innerHTML=t}}function U(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Y(){this.nextSibling&&this.parentNode.appendChild(this)}function G(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function F(){return null}function J(){var t=this.parentNode;t&&t.removeChild(this)}function K(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Q(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}var Z={},tt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Z={mouseenter:"mouseover",mouseleave:"mouseout"}));function et(t,e,n){return t=nt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function nt(t,e,n){return function(r){var i=tt;tt=r;try{t.call(this,this.__data__,e,n)}finally{tt=i}}}function rt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function it(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function ot(t,e,n){var r=Z.hasOwnProperty(t.type)?et:nt;return function(i,o,u){var a,c=this.__on,s=r(e,o,u);if(c)for(var l=0,h=c.length;l<h;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=n),void(a.value=e);this.addEventListener(t.type,s,n),a={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(a):this.__on=[a]}}function ut(t,e,n,r){var i=tt;t.sourceEvent=tt,tt=t;try{return e.apply(n,r)}finally{tt=i}}function at(t,e,n){var r=S(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function ct(t,e){return function(){return at(this,t,e)}}function st(t,e){return function(){return at(this,t,e.apply(this,arguments))}}var lt=[null];function ht(t,e){this._groups=t,this._parents=e}function ft(){return new ht([[document.documentElement]],lt)}ht.prototype=ft.prototype={constructor:ht,select:function(t){"function"!=typeof t&&(t=l(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,u,a=e[i],c=a.length,s=r[i]=new Array(c),h=0;h<c;++h)(o=a[h])&&(u=t.call(o,o.__data__,h,a))&&("__data__"in o&&(u.__data__=o.__data__),s[h]=u);return new ht(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=f(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var u,a=e[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(r.push(t.call(u,u.__data__,s,a)),i.push(u));return new ht(r,i)},filter:function(t){"function"!=typeof t&&(t=d(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,u=e[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new ht(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),l=-1,this.each((function(t){p[++l]=t})),p;var n,r=e?v:g,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var u=o.length,a=new Array(u),c=new Array(u),s=new Array(u),l=0;l<u;++l){var h=i[l],f=o[l],d=f.length,p=t.call(h,h&&h.__data__,l,i),y=p.length,x=c[l]=new Array(y),m=a[l]=new Array(y);r(h,f,x,m,s[l]=new Array(d),p,e);for(var _,w,b=0,E=0;b<y;++b)if(_=x[b]){for(b>=E&&(E=b+1);!(w=m[E])&&++E<y;);_._next=w||null}}return(a=new ht(a,i))._enter=c,a._exit=s,a},enter:function(){return new ht(this._enter||this._groups.map(p),this._parents)},exit:function(){return new ht(this._exit||this._groups.map(p),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=e[a],l=n[a],h=s.length,f=u[a]=new Array(h),d=0;d<h;++d)(c=s[d]||l[d])&&(f[d]=c);for(;a<r;++a)u[a]=e[a];return new ht(u,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=x);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var u,a=n[o],c=a.length,s=i[o]=new Array(c),l=0;l<c;++l)(u=a[l])&&(s[l]=u);s.sort(e)}return new ht(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,e){var n=o(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?_:m:"function"==typeof e?n.local?B:E:n.local?b:w)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?A:"function"==typeof e?k:T)(t,e,null==n?"":n)):O(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?X:"function"==typeof e?z:C)(t,e)):this.node()[t]},classed:function(t,e){var n=j(t+"");if(arguments.length<2){for(var r=P(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?$:e?D:W)(n,e))},text:function(t){return arguments.length?this.each(null==t?L:("function"==typeof t?I:q)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?U:H)(t)):this.node().innerHTML},raise:function(){return this.each(Y)},lower:function(){return this.each(G)},append:function(t){var e="function"==typeof t?t:c(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:c(t),r=null==e?F:"function"==typeof e?e:l(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(J)},clone:function(t){return this.select(t?Q:K)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=rt(t+""),u=o.length;if(!(arguments.length<2)){for(a=e?ot:it,null==n&&(n=!1),r=0;r<u;++r)this.each(a(o[r],e,n));return this}var a=this.node().__on;if(a)for(var c,s=0,l=a.length;s<l;++s)for(r=0,c=a[s];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?st:ct)(t,e))}};var dt=ft,pt=function(t){return"string"==typeof t?new ht([[document.querySelector(t)]],[document.documentElement]):new ht([[t]],lt)},yt=function(t){return pt(c(t).call(document.documentElement))},gt=0;function vt(){return new xt}function xt(){this._="@"+(++gt).toString(36)}xt.prototype=vt.prototype={constructor:xt,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var mt=function(){for(var t,e=tt;t=e.sourceEvent;)e=t;return e},_t=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]},wt=function(t){var e=mt();return e.changedTouches&&(e=e.changedTouches[0]),_t(t,e)},bt=function(t){return"string"==typeof t?new ht([document.querySelectorAll(t)],[document.documentElement]):new ht([null==t?[]:t],lt)},Et=function(t,e,n){arguments.length<3&&(n=e,e=mt().changedTouches);for(var r,i=0,o=e?e.length:0;i<o;++i)if((r=e[i]).identifier===n)return _t(t,r);return null},Bt=function(t,e){null==e&&(e=mt().touches);for(var n=0,r=e?e.length:0,i=new Array(r);n<r;++n)i[n]=_t(t,e[n]);return i}},function(t,e,n){"use strict";function r(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}n.r(e),n.d(e,"flextree",(function(){return h}));function i(t,e){var n,r,i,u,s,l=new c(t),h=+t.value&&(l.value=t.value),f=[l];for(null==e&&(e=o);n=f.pop();)if(h&&(n.value=+n.data.value),(i=e(n.data))&&(s=i.length))for(n.children=new Array(s),u=s-1;u>=0;--u)f.push(r=n.children[u]=new c(i[u])),r.parent=n,r.depth=n.depth+1;return l.eachBefore(a)}function o(t){return t.children}function u(t){t.data=t.data.data}function a(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function c(t){this.data=t,this.depth=this.height=0,this.parent=null}c.prototype=i.prototype={constructor:c,count:function(){return this.eachAfter(r)},each:function(t){var e,n,r,i,o=this,u=[o];do{for(e=u.reverse(),u=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)u.push(n[r])}while(u.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return i(this).eachBefore(u)}};var s=n(0);const l=Object.freeze({children:t=>t.children,nodeSize:t=>t.data.size,spacing:0});function h(t){const e=Object.assign({},l,t);function n(t){const n=e[t];return"function"==typeof n?n:()=>n}function r(t){const e=u(function(){const t=o(),e=n("nodeSize"),r=n("spacing");return class extends t{constructor(t){super(t),Object.assign(this,{x:0,y:0,relX:0,prelim:0,shift:0,change:0,lExt:this,lExtRelX:0,lThr:null,rExt:this,rExtRelX:0,rThr:null})}get size(){return e(this.data)}spacing(t){return r(this.data,t.data)}get x(){return this.data.x}set x(t){this.data.x=t}get y(){return this.data.y}set y(t){this.data.y=t}update(){return f(this),d(this),this}}}(),t,t=>t.children);return e.update(),e.data}function o(){const t=n("nodeSize"),e=n("spacing");return class n extends i.prototype.constructor{constructor(t){super(t)}copy(){const t=u(this.constructor,this,t=>t.children);return t.each(t=>t.data=t.data.data),t}get size(){return t(this)}spacing(t){return e(this,t)}get nodes(){return this.descendants()}get xSize(){return this.size[0]}get ySize(){return this.size[1]}get top(){return this.y}get bottom(){return this.y+this.ySize}get left(){return this.x-this.xSize/2}get right(){return this.x+this.xSize/2}get root(){const t=this.ancestors();return t[t.length-1]}get numChildren(){return this.hasChildren?this.children.length:0}get hasChildren(){return!this.noChildren}get noChildren(){return null===this.children}get firstChild(){return this.hasChildren?this.children[0]:null}get lastChild(){return this.hasChildren?this.children[this.numChildren-1]:null}get extents(){return(this.children||[]).reduce((t,e)=>n.maxExtents(t,e.extents),this.nodeExtents)}get nodeExtents(){return{top:this.top,bottom:this.bottom,left:this.left,right:this.right}}static maxExtents(t,e){return{top:Math.min(t.top,e.top),bottom:Math.max(t.bottom,e.bottom),left:Math.min(t.left,e.left),right:Math.max(t.right,e.right)}}}}function u(t,e,n){const r=(e,i)=>{const o=new t(e);Object.assign(o,{parent:i,depth:null===i?0:i.depth+1,height:0,length:1});const u=n(e)||[];return o.children=0===u.length?null:u.map(t=>r(t,o)),o.children&&Object.assign(o,o.children.reduce((t,e)=>({height:Math.max(t.height,e.height+1),length:t.length+e.length}),o)),o};return r(e,null)}return Object.assign(r,{nodeSize(t){return arguments.length?(e.nodeSize=t,r):e.nodeSize},spacing(t){return arguments.length?(e.spacing=t,r):e.spacing},children(t){return arguments.length?(e.children=t,r):e.children},hierarchy(t,n){const r=void 0===n?e.children:n;return u(o(),t,r)},dump(t){const e=n("nodeSize"),r=t=>n=>{const i=t+"  ",o=t+"    ",{x:u,y:a}=n,c=e(n),s=n.children||[],l=0===s.length?" ":`,${i}children: [${o}${s.map(r(o)).join(o)}${i}],${t}`;return`{ size: [${c.join(", ")}],${i}x: ${u}, y: ${a}${l}},`};return r("\n")(t)}}),r}h.version=s.a;const f=(t,e=0)=>(t.y=e,(t.children||[]).reduce((e,n)=>{const[r,i]=e;f(n,t.y+t.ySize);const o=(0===r?n.lExt:n.rExt).bottom;0!==r&&y(t,r,i);return[r+1,E(o,r,i)]},[0,null]),p(t),b(t),t),d=(t,e,n)=>{void 0===e&&(e=-t.relX-t.prelim,n=0);const r=e+t.relX;return t.relX=r+t.prelim-n,t.prelim=0,t.x=n+t.relX,(t.children||[]).forEach(e=>d(e,r,t.x)),t},p=t=>{(t.children||[]).reduce((t,e)=>{const[n,r]=t,i=n+e.shift,o=r+i+e.change;return e.relX+=o,[i,o]},[0,0])},y=(t,e,n)=>{const r=t.children[e-1],i=t.children[e];let o=r,u=r.relX,a=i,c=i.relX,s=!0;for(;o&&a;){o.bottom>n.lowY&&(n=n.next);const r=u+o.prelim-(c+a.prelim)+o.xSize/2+a.xSize/2+o.spacing(a);(r>0||r<0&&s)&&(c+=r,g(i,r),v(t,e,n.index,r)),s=!1;const l=o.bottom,h=a.bottom;l<=h&&(o=m(o),o&&(u+=o.relX)),l>=h&&(a=x(a),a&&(c+=a.relX))}!o&&a?_(t,e,a,c):o&&!a&&w(t,e,o,u)},g=(t,e)=>{t.relX+=e,t.lExtRelX+=e,t.rExtRelX+=e},v=(t,e,n,r)=>{const i=t.children[e],o=e-n;if(o>1){const e=r/o;t.children[n+1].shift+=e,i.shift-=e,i.change-=r-e}},x=t=>t.hasChildren?t.firstChild:t.lThr,m=t=>t.hasChildren?t.lastChild:t.rThr,_=(t,e,n,r)=>{const i=t.firstChild,o=i.lExt,u=t.children[e];o.lThr=n;const a=r-n.relX-i.lExtRelX;o.relX+=a,o.prelim-=a,i.lExt=u.lExt,i.lExtRelX=u.lExtRelX},w=(t,e,n,r)=>{const i=t.children[e],o=i.rExt,u=t.children[e-1];o.rThr=n;const a=r-n.relX-i.rExtRelX;o.relX+=a,o.prelim-=a,i.rExt=u.rExt,i.rExtRelX=u.rExtRelX},b=t=>{if(t.hasChildren){const e=t.firstChild,n=t.lastChild,r=(e.prelim+e.relX-e.xSize/2+n.relX+n.prelim+n.xSize/2)/2;Object.assign(t,{prelim:r,lExt:e.lExt,lExtRelX:e.lExtRelX,rExt:n.rExt,rExtRelX:n.rExtRelX})}},E=(t,e,n)=>{for(;null!==n&&t>=n.lowY;)n=n.next;return{lowY:t,index:e,next:n}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,